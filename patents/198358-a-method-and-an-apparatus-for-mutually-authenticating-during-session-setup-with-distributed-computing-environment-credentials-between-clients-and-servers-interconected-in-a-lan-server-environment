<!DOCTYPE html>
<html lang="en">
  
<!-- Mirrored from www.allindianpatents.com/patents/198358-a-method-and-an-apparatus-for-mutually-authenticating-during-session-setup-with-distributed-computing-environment-credentials-between-clients-and-servers-interconected-in-a-lan-server-environment by HTTrack Website Copier/3.x [XR&CO'2014], Fri, 05 Apr 2024 06:35:08 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Indian Patents. 198358:&#x27;&#x27;A METHOD AND AN APPARATUS FOR MUTUALLY AUTHENTICATING DURING SESSION SETUP WITH DISTRIBUTED COMPUTING ENVIRONMENT CREDENTIALS BETWEEN CLIENTS AND SERVERS INTERCONECTED IN A LAN SERVER ENVIRONMENT&#x27;&#x27;</title>
    <meta content="authenticity_token" name="csrf-param" />
<meta content="cYcP52B8zyTWKbLwby2YPh9z/gvY/RLjWOwY4YXkiXg=" name="csrf-token" />

    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
      <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.6.1/html5shiv.js" type="text/javascript"></script>
    <![endif]-->

    <link href="../assets/application-e80cf34975c5b1730c80b2f7170e7d26.css" media="all" rel="stylesheet" type="text/css" />

  </head>
  <body>

    <div class="navbar navbar-fluid-top">
      <div class="navbar-inner">
        <div class="container-fluid">
          <a class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>
          <a class="brand" href="../index.html">Indian Patents</a>
          <div class="container-fluid nav-collapse">
            <ul class="nav">
              <li><a href="../recently-granted.html">Recently Granted Patents</a></li>
              <li><a href="../recently-published.html">Recently Published Patents</a></li>
            </ul>
            <form id="gform" class="navbar-search pull-right" action="https://www.google.com/search" method="get" target="_blank" onsubmit="document.getElementById('gform').q.value='site:http://www.allindianpatents.com '+document.getElementById('gform').q.value">
                <input type="text" name="q" id="q" class="search-query" placeholder="Search" onclick="this.value=''" autocomplete="off">
            </form>
          </div><!--/.nav-collapse -->
        </div>
      </div>
    </div>

    <div class="container-fluid">
      <div class="row-fluid">
        <div class="span12">

          <style>
          .allindianpatents-top { width: 320px; height: 50px; }
          @media(min-width: 500px) { .allindianpatents-top { width: 468px; height: 60px; } }
          @media(min-width: 800px) { .allindianpatents-top { width: 728px; height: 90px; } }
          </style>
          <center>
          </center>
          
          <div class="row-fluid">
	<div class="span8">

		<table class="table">
			<tr>
				<th>Title of Invention</th>
				<td><h1 style="font-size:large;">&#x27;&#x27;A METHOD AND AN APPARATUS FOR MUTUALLY AUTHENTICATING DURING SESSION SETUP WITH DISTRIBUTED COMPUTING ENVIRONMENT CREDENTIALS BETWEEN CLIENTS AND SERVERS INTERCONECTED IN A LAN SERVER ENVIRONMENT&#x27;&#x27;</h1></td>
			</tr>
			<tr>
				<th>Abstract</th>
				<td>SYSTEM AND METHOD FOR SUPPORTING DISTRIBUTED COMPUTING MECHANISMS IN A LOCAL AREA NETWORK SERVER ENVIRONMENT Abstract LAN server machines are configured to utilize their existing mechanisms to pass generic security subsystem (GSS) distributed computing environment (DCE) credentials The server management block (SMB) protocol is extended to facilitate exchange of such credentials wherein the server utilizes the GSS API interface to obtain and validate such credentials. The GSS interface provides tokens which encapsulate all necessary information to perform mutual authentication between the client and server. A new protocol level is defined with respect to such SMB protocol extensions which includes a new protocol name exchanged in the negotiate protocol (NP) SMB. Pre¬existing LAN servers will turn on a bit in the SMB_Secmode field in the NP response indicating that the server supports exchange of secpkgX SMB. The server will then wait for an SMB speck or SMB sesssetupX response. The former response will permit the user/client and server to exchange GSS tokens utilizing a conventional LAN server mechanism and to thereby and mutually authenticate.</td>
			</tr>
		</table>

					<style>
					.allindianpatents-post-abstract { width: 320px; height: 50px; }
					@media(min-width: 880px) { .allindianpatents-post-abstract { width: 468px; height: 60px; } }
					@media(min-width: 1267px) { .allindianpatents-post-abstract { width: 728px; height: 90px; } }
					</style>
					<center>
					<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
					<!-- AllIndianPatents-post-abstract -->
					<ins class="adsbygoogle allindianpatents-post-abstract"
					     style="display:inline-block"
					     data-ad-client="ca-pub-7914358224572760"
					     data-ad-slot="9152759240"></ins>
					<script>
					(adsbygoogle = window.adsbygoogle || []).push({});
					</script>					
					</center>

		<table class="table">
			<tr>
				<th>Full Text</th>
				<td>Technical Field<br>
This invention relates to authentication in computer systems and, more particularly  to authentication techniques in client-server local area network environments.<br>
Background of the Invention<br>
In a session setup of a typical local area network, a process transpires conventionally wherein, with reference to Fig   2, a client-user 100 and a server 102 negotiate a network protocol 104 (NP). During such negotiation, a protocol and associated protocol level 208 are agreed upon (corresponding, for example, to CORE, LAN 2.1, etc.) whereupon a session key 106 is determined for the client 100.<br>
The client-user 100 will typically transmit information such as the user's id, name, and password 112 to the server 102 and, more particularly, to a redirector 116  Fig. 8 which serves as the network interface to and from the LAN server 102.  The redirector 116 essentially serves the purpose of a network interface, redirecting disk drives and file input/output, etc.  For example, if a client connects to a drive, to the client it may appear to be a local drive. However, the redirector essentially serves as a file system which may pass the drive specification to the actual file system which will manage the drive, thereby redirecting requests from the client to the actual file server handling the drive, such process being transparent to the client.<br><br>
In conventional operation, the server.102 then would typically examine its data±)ace 118, Fig. 3, and based upon the user id, would extract the user's password and session key 106, Fig. 2, and determine if there was a match. If so, the server 102 would then fetch the user definition 120, Fig. 3 out of the server's local database 118.  It will be noted that this session key 106 is essentially a timestamp or serial number.  In the implementation under consideration, for reasons which will become apparent in discussion of the invention, rather than employing the database 118, the implementation employs the Distributed Computing Environment (DCE) and associated Kerberos registry 122, Fig, 4, and more particularly, the directory and security server (DSS) component of DCE wherein the user definition resides.<br>
Thus in summary, at logon, a client 100, when logging onto a distributed computing environment negotiates a protocol 104, Fig. 2, which results in a protocol level 208 being returned.  It is desirable in some local area network server environments such as the LAN Server Enterprise (LSE) product of the IBM Corporation to employ DCE to authenticate use with DCE and thus to associate DCE credentials for users that connect to the LAN because it is deemed to be a relatively more secure environment than that effected by a typical LAN server authentication mechanism.  Thus it is desirable at logon to obtain DCE credentials which the server 102 may understand, such DCE credentials being normally obtained through remote procedure calls (RPC).<br>
It has been found, however, that a problem may arise in such local area networks wherein no mechanism is provided to obtain such DCE credentials from the client<br><br>
100 to the server 102, More particularly, in the case of the LSE and similar LAN products, for example, RPC calls are not utilized natively but nevertheless the server needs to obtain genuine credentials to authenticate the user during the session setup.  Such credentials are utilized in determining access to LSE resources which are protected by POSIX access controls lists (ACLs).  Thus, a serious problem was presented of providing a mechanism to obtain such DCE credentials from the client to the server with current protocols such as those typically defined by the X/Open Association as represented by the Server Management Block (SMB) protocols, for example, while nevertheless utilizing conventional LAN server mechanisms.<br>
Summary of the Invention<br>
In a preferred embodiment of the invention, LAN server machines in a computerized LAN network are configured so as to permit them to utilize their existing mechanisms to pass generic security sxibsystem (GSS) distributed computing environment (DCE) credentials.  The server management block (SMB) protocol defined by X/Open is extended to facilitate exchange of such credentials wherein the server utilizes the GSS API interface provided by DCE to obtain and validate such credentials. The GSS interface provides tokens which encapsulate all necessary information to perform mutual authentication between the client and server.<br>
In the preferred embodiment, with respect to such SMB protocol extensions, a new protocol level is defined which, in the specific embodiment includes a new protocol name exchanged in the negotiate protocol (NP) SMB.  Pre¬existing LAN servers such as the IBM Lan Server<br><br>
Enterprise (LSE) product will turn on a bit (bit 2 with respect to LSE) of the SMB_secmode field in the response, such bit indicating that the server supports exchange of secpkgX SMBs. The server will then wait for an SMBsecpkgX or SMBsesssetupX request. The former response will permit the user/client and server to exchange GSS tokens and mutually authenticate and will further allow the server to select from multiple packages.  The pre¬existing LAN server product will define a new package under an SMB__pkgname which the LAN server will send and recognize in order to handle a GSSDCE token. A user on a client will be authenticated once the SMBsecpkgX has flowed because the authentication will allocate and return the necessary data structures in order for the server to track the user.<br>
Further in accordance with the invention, as to processing GSS tokens, on the client side, a gss_initiate_sec_context function is called in order for the client to obtain a token to send to the server. The token is sent to the server and a return token then received from the server. The return token is then passed to a gss_initiate_sec_context function, which will now return whether or not the server is authenticated. If the server is not authenticated, session establishment is terminated.<br>
On the server side, when the SMBsecpkgX response is received, the token is extracted and processed by a gss_accept_sec_context function.  If the client is authenticated, a token to send to the client is also received. The token is sent to the client on the SMBsecpkgX response.  After sending the SMB, the server extracts the user's credentials from the GSS token.  The credentials are attached to the session data structures<br><br>
and are utilized thereafter whenever the user attempts to access resources.<br>
Regarding the redirector-GSS interface, in a preferred eitibodiment herein disclosed, the LAN server redirector normally runs at ring 0 whereas the GSS runs at ring 3, meaning that the redirector and GSS may not communicate directly.  Accordingly, in accordance with the invention, a credential manager process is created as an intermediary.  The credential manager gives a captive thread to the redirector at startup.  As connections are made to the LAN servers, the redirector utilizes the captive threads to request and process GSS tokens.  The credential manager uses the credentials of the user currently logged onto the LAN server to obtain the tokens.  A user profile management (UPM) process notifies the credential manager of logon and logoff events.  This allows the credential manager to track the logged-on user without querying the UPM on every session setup attempt.<br><br>
Accordingly, the present invention provides a method for mutually authenticating during session setup with distributed computing environment (DCE) credentials between clients and servers interconnected in a LAN server environment which does not support remote procedure calls (RPC) natively, comprising: predefining an extension of a server management block (SMB) protocol to exchange credentials; accessing with said server supporting said predefined extension, a generic security subsystem (GSS) through a GSS API interface defined by said DCE; and obtaining and validating said credentials from said GSS in response to said accessing.<br>
The present invention also provides an apparatus for mutually authenticating during session setup with distributed computing environment (DCE) credentials between clients and servers interconnected in a LAN server environment which does not support remote procedure calls (RPC) natively, comprising: means for predefining an extension of a server management block (SMB) protocol to exchange credentials; means for accessing with said server supporting said predefined extension, a generic security subsystem (GSS) through a GSS API interface defined by said DCE; and means for obtaining and validating said credentials from said GSS in response to said accessing.<br>
With reference to the accompanying drawings, in which :<br>
Fig. 1 is a functional block diagram of a computer network in which the invention may be advantageously employed;<br>
Fig. 2 is a schematic illustration of protocol negotiation;<br><br>
Fig. 3 illustrates usage of a database by a server to obtain user definitions;<br>
Fig. 4 is a block diagram illustrating usage of DCE registry by a server in order to obtain user definitions;<br>
Fig. 5 is a block diagram depicting the components and signal flow of the invention implementable in the system of fig 1;<br><br>
Fig. 6 is a schematic illustration of the token mechanism of the invention;<br>
Fig. 7 is a block diagram illustrating the credential manager and redirector of the invention.<br>
Fig 8 is a state machine employed in accordance with the invention.<br>
Detailed Description of the Preferred Embodiment<br>
Turning first to Fig. 1,  a high level description of a network environment will first be provided in which the invention preferably may be embodied. With reference to Fig. 1, there is depicted a pictorial representation of a data processing system 8 which may be utilized to implement a method and system of the present invention. As may be seen, data processing system 8 may include a plurality of networks, such as local area networks (I^AN) 10 and 32, each of which preferably includes a plurality of individual computers 12, 12a-12c, 30, 31, 33 and 35. (Hereafter, when discussing a computer in network 32, a conputer 30 will be arbitrarily referenced, although the discussion could relate to any of the computers in network 32) . Computers 12 and 30 may be implemented utilizing any suitable computer such as the IBM Personal System/2 (also called a "PS/2") computer or an IBM RISC SYSTEM/6000 computer workstation, both product of International Business Machines corporation, located in Armonk, New York.  "RISC SYSTEM/6000" is a trademark of International Business Machines Corporation, "Personal System/2" and "PS/2" are registered trademarks of International Business Machines Corporation.  Of course, those skilled in the art will appreciate that a plurality<br><br>
of intelligent work stations (IWS) coupled to a host processor may be utilized for each such network.<br>
As is common in such data processing systems, each individual computer may be coupled to a storage device 14 and/or a printer/output device 16. One or more such storage devices 14 may be utilized, in accordance with the method of the present invention, to store objects, such as documents, resource objects, or executable code, which may be periodically accessed by any user within data processing system 8. In a manner well known in the prior art, each such object stored within a storage device 14 may be freely interchanged throughout data processing system 8 by transferring an object to a user at an individual coit^uter 12 or 30, for example.<br>
Still referring to Fig. 1, it may be seen that data processing system 8 also may include multiple mainframe computers, such as mainframe computer 18, which may be preferably coupled to LAN 10 by means of communications link 22.  Mainframe computer 18 may be implemented utilizing an Enterprise Systems Architecture/370 (also called an "ESA/370") or an Enterprise Systems Architecture/390 (also called an "ESA/390") computer available from IBM.  Depending on the application a mid-range computer, such as an Application System/400 (also called an "AS/400"), may be employed.  "Enterprise Systems Architecture /370", "ESA/370", "Enterprise Systems Architecture/370"» and "ESA/390" are trademarks of IBM; "Application System /400" and "AS/400" are registered trademarks of IBM; "Application System/400" and "AS/400" are registered trademarks of IBM. Mainframe computer 18 also may be coupled to a storage device 20 which may serve as remote storage for LAN 10.  Similarly, LAN 10 may be coupled via communications link 24 through<br><br>
a subsystem control unit/coinmuni cat ions controller 26 and communications link 34 to a gateway server 28.  Gateway server 28 is preferably an individual computer or IWS which serves to link LAN 32 to LAN 10.<br>
As discussed above with respect to LAN 32 and LAN 10, objects may be stored within storage device 20 and controlled by mainframe computer 18, as Resource Manager or File System Manager for the stored objects.  Of course, those skilled in the art will appreciate that mainframe computer 18 may be located a great geographic distance from LAN 10 and similarly LAN 10 may be located a substantial distance from LAN 32.  For example, LAN 32 may be located in California while LAN 10 may be located within Texas and mainframe computer 18 may be located in New York.<br>
A preferred embodiment of the present invention may be incorporated within various computers depicted within data processing system 8.<br>
In the DSS protocol, which is part of DCE, the client 100, Fig. 2, will request a ticket from the registry 122, Fig. 4, which may then be passed to the server 102. With respect to some applications, they will issue a NetUse such as that shown at 124, Fig. 7 to the redirector 116 which will kick off the protocol -essentially a user-issued command triggering the client 100 to set up a session with the server 102.  In response to this NetUse, the redirector 116, then issues server management blocks (SMBs) according to the SMB communication protocol of X/Open in order to effect the negotiation of protocol and session setup.  In accordance with the invention, however, in LAN servers utilizing a generic security subsystem (GSS) component of DCE, 126, Fig. 7, and a redirector such as that shown at 116, Fig.<br><br>
7, as previously noted, a problem is presented of providing a mechanism for conveying requests through a credential manager 128, Fig. 8 to the GSS 126.  In order to effect this mechanism, a state machine. Fig. 8, is defined for the credential manager 128 because there are commands interchanged between the credential manager and redirector required for setting up a session.  The operation of this state machine will be hereinafter discussed with reference to Fig. 8 in more detail.<br>
It will be recalled that the SMB defined by the X/Open protocol is essentially a free-form security extension which provides the concept of packages which are a mechanism employed to authenticate users.  It is a significant feature of the invention that a unique such package is defined in the implementation of the invention which will provide for passing of tokens such as 130, Fig. 7.  Referring further to Fig. 7, this token 130 will be seen to be passed from the GSS 126 to the credential manager 128 and then to the redirector 116 (also shown in Fig. 6).  It will be recalled that the redirector 116 essentially is the component of the client.  The server will make a call gss_accept_context, 133, Fig. 6, in order to process this token 130 after it has been received in the GSS package.  Receipt by the redirector of the token in turn will cause the server 102 to obtain a second token, 132, Fig. 6.  The client 100 will then transfer this second token 132 to the credential manager 128 and then to the GSS 126, whereupon the GSS may then authenticate the server 102.<br>
In summary, when the first token goes across the network, the client essentially has authenticated itself to the server.  If it is not authenticated, the session setup terminates whereas if it is authenticated, the<br><br>
session setup is effected.  Because the server has already authenticated the client, the server now will issue a fionction call to GSS 126, and obtain a definition from GSS of the user as previously noted.  In prior systems, it is important to note that, as previously described, servers maintained their own database such as that shown in Fig. 3, reference numeral 118, to obtain a user definition 120 for verifying the user. However in accordance with the invention, the GSS is not replicated for every server, and also differing security mechanisms may be provided under GSS. The DCE extensions permit the system to obtain credentials and not only is the user authenticated but according to the system, it is thereby known which server authenticated the user.  GSS is employed but it is actually the Kerberos functions in DCE which are employed underneath for the authentication.<br>
In summary, a system is herein disclosed permitting conventional LAN server workstations and servers integrated with DCE to employ their existing mechanisms in order to pass GSS DCE credentials for authentication. Although the invention is not intended to be so limited, in the specific embodiment disclosed herein, changes are made to workstations and servers operating the OS/2 (TM) operating system available from the IBM Corporation. Further details, as background, regarding a representative LAN system may be obtained from "OS/2 Lan Searver, Programming Guide and Reference", copyright IBM Corporation, SlOH-9687-00, 1994, which is incorporated herein by reference. However, the aforementioned concept may be extended to stations and servers executing other operating systeins as well.<br>
In the OS/2 eBtibodiment, the modifications to existing Lan server products will now cause the second<br><br>
bit of the smb_secaiiode field in the NP response to be turned on.  The server will then wait for the previously described SMBsecpkgX or SMBsesssetupX request.  The former, of course, will permit the user and server to exchange GSS tokens and mutually authenticate, and is defined in "PROTOCOLS FOR X/OPEN PC INTERWORKING: SMB VERSION 2", Section 11.2, available from the X/Open Corporation.  This function permits a server to select from multiple packages.<br>
The SMBsesssetupX following an SMBsecpkgX request may have a zero length smb_apasswd because authentication has already occurred, and any contents therein will thus be ignored.  If no SMBsecpkgX request is received, or no known package was included in the SMBsecpkgX request and received, the smb_apasswd field must contain a valid password to allow the server to authenticate the user. In this case, the server must obtain the credentials for the user.<br>
In accordance with the implementation of the invention herein described, changes must be provided to the Negotiate Protocol (NP) as follows. A Set Flag will be made to enable the secpkgX (bit nximber 2 in the secmode field as previously described).  Still further, a new srvhueristic bit will be provided which will determine whether or not the server will support legacy clients.  If legacy support is turned off, then the server will not offer the set of legacy protocols when negotiating.  This will prevent the less-secure legacy clients from connection.<br>
Also as previously noted, a new protocol level is defined which, in the specific implementation under consideration, provides that a string LSE 10 flow on the wire.  In order to obtain tickets for cross-cell servers,<br><br>
the NP response will change to include the server's cell name and its length. The cell name, will be after the domain name and will be used by the Credential Manager 128, Fig. 5, when obtaining the security context.  The cell name is required for cross-cell authentication but will only be sent when negotiation results in the LSE 10 string.<br>
Also as previously noted, secpkgX changes will be required. As noted, this function is defined in "PROTOCOLS FOR X/OPEN PC INTERWORKING: SMB VERSION 2", Section 11.2 available from X/Open. This format will be employed in the present embodiment herein disclosed, with the specific information being defined for the particular LAN server which is employed, such as the LS 4,0E available from the IBM Corporation.  For the SMB__pkglist structure, the SMB_pkgname will be "Lan Server 4.0E GSS/DCE Token" which, as previously noted, will be the only package that the LS 4.0E server product will send or recognize.<br>
In the following Table, the data structures for the aforementioned SMBsecpkgX will be defined as follows:<br><br><br><br>
Referring now to Fig. 5 in greater detail, the basic flow of this system is depicted therein schematically. First, the user logs on, 210, with the login context being set as system context, 211.  Next, LSCredMGR function obtains credentials for a user, and the GSS credentials are created from the system context, 212, 213.  This is followed by a session setup request to the server, 214.  The next series of steps 215-218 represent that a context token for the Server is obtained which includes the GSS call(s) to DCE.<br>
Continuing with Fig. 5, at step 219, the SMBsecpkg_X call is sent which contains the system context token.  At this point servers obtains credentials at startup time, 220, 221 and the SMBsecpkg_X is received, 222.  Next, at 223, 224, the Server will validate the user with the GSS_Accept_context function and receives a response token which includes GSS call(s) to DCE.  This is followed by the server extracting EPAC from the GSS token, 225, 226.<br><br>
Next, the SMBsecpkg_JC response is sent containing the GSS context token, 227. Also, the SMBsecpkg_;c response is received, 227. As shown by steps 228-231, the Server's context token is then validated which includes GSS call(s) to DCE. Finally, as shown at reference numeral 232, the SMBSessSetup_X is sent and received.<br>
Another aspect of the invention relates to the conventional practice of providing tokens which have a finite lifetime. When the token expires, typically the server will automatically then break connection to the client. Accordingly, some means is needed to periodically refresh the token.<br>
Thus, in accordance with the invention, after a session is set up, the credential manager 128, Fig. 5, will determine what the remaining lifetime of a ticket is.  Just before expiration, after inaking such determination, the credential manager 128 will thus preferably obtain a new token and transfer it to the server 102.  This token may be seen represented as token 242 in Fig. 6, and will be described further with reference to the event monitoring function provided by the state machine of Fig. 8.<br>
The current logon status affects how the credential manager 128 manages the contexts. There are essentially four logon events which will affect the credential manager as follows.<br>
The first, as shown in Fig. 8, is the logon function 238.  The credential manager 128 must obtain the DCE system credentials.  The credentials will be imported from the logon exec. Next, the logoff event 236, Fig. 8, in like manner will affect the credential manager 128. The credential manager must clear all of the session information it was maintaining for the logon user. When<br><br>
a logoff occurs, the RDR will close all sessions and release the DCE system credentials it is using.  This event will still be needed for cleanup and state maintenance.  Thirdly, a credential refresh 234 is provided for in the manner described above. This event will prevent the credential manager from transitioning into a state of expired credentials. The credential cache name will not change.  If the system is already in an expired state, a new context and cache name will be acquired.  The credential manager will handle both types of refreshes.  Fourthly, credential expiration is provided for in the state machine, shown at reference numeral 240, Fig. 8. When the credentials expire, the credential manager 128 can no longer obtain tickets.  The credential manager 128 will accordingly return an error code to the RDR when requests come in during this state. Once the user is in this state, the credentials cannot be refreshed, and a new set of credentials will be obtained by the logon exec.<br>
Another aspect of the credential manager 128 should be noted when the client 100 is being shut down.  In such event, the redirector 116 will detect this (e.g., a Net Stop function), whereupon a close command (260, Fig. 7) issued by the redirector 116 will cause the credential manager process 128 to terminate. When the systems are restarted, the redirector 116 will obviously be started upon booting.  However, the credential manager 128 is not yet running until the rest of the GSS is started. Once the GSS starts, the credential manager 128 will send the token command 130 which will be held captive in the redirector 116.  This thread of execution is then utilized by the redirector, which issues a connect 1<br><br>
command 262.  A connect 2 command, 264, holds the thread captive in the credential manager 128.<br>
With the foregoing description in mind, additional factors in the implementation of the invention as described herein are noteworthy.  It will noted that in DCE terms, "credentials" may be thought of as Kerberos tickets or, more generically, a definition of a user and the group, the user is a member of (e.g., administrator, guest, user, etc.).  Such credentials are on a per process basis typically, wherein each process is in charge of managing its own process so to speak.  In accordance with the invention, however, a credential manager has thus herein been provided for the whole networking system which will manager the individual processes.  Thus, in accordance with the invention, all such individual processes will have no idea that DCE credentials are operating beneath them inasmuch as the system assvimes responsibility for items hereinbefore nomtially thought to be process-specific, such as the particular login being employed. Normally it is unique per application. However, in accordance with the invention, when applications make various calls which would otherwise have been process specific, they are now being managed at a system level basis wherein the credential manager knows what each of the processes are and sends proper credentials in order to obtain tokens.<br>
In accordance with the invention, two software entities have essentially been merged which otherwise implement relatively dissimilar mechanisms for managing security.  More specifically, the invention provided for LAN server machines to utilize their existing mechanisms in conjunction with DCE code, whereby these two entities of conventional LAN and DCE code are brought together so<br><br>
as to work seamlessly.  It will be recalled that LAN implementations of security provide for relatively simple authentication, and one of the benefits to enploying DCE authentication in accordance with the invention is because it provides a more secure environment with a more complex authentication mechanism.<br>
In addition to the novel provision of a credential manager implementation for enabling LAN servers to operate with GSS DCE credentials, the implementation in the invention of tokens eitploying the SMBsecpkgX package, which is part of the X/Open specification and SMB architecture, has provided novel results.  In accordance with this aspect of the invention, the novel package thereby defined includes a flag signifying mutual authentication, the hereinbefore described token, and user name which is normally obtained in a later SMB on session setup when the user is defined. Now, rather than the SMBsecpkg_JK being a negotiation of the authentica.tion protocol to use at session setups, in accordance with the invention authentication has been moved upward from session setup to the SMBsecpkgX function.<br>
By its architectural definition, session setups are where users are authenticated. However, in accordance with the invention, authentication as noted is moved up to prior to the SMB. Thus when the system gets to a session setup, the work to effect a session setup is performed, but authentication is not required because it has already been effected.  Through the novel use of a custom SMBsecpkg_X package, authentication has effectively been moved from one SMB to another. Conventional usage of this package function, however, was that when a product is sent encrypted with a session key, the feature would allow specification of different<br><br>
mechanisms for authentication as desired (e.g., different encryption algorithms, keys, etc.).  However, the implementation of the invention, as aforesaid, facilitates moving authentication up from the session setups to the transmission of the SMBsecpkg_JX package. While the invention has been shown and described with reference to particular embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention.<br><br><br>
WE CLAIM :<br>
1.	A method for mutually authenticating during session setup with distributed computing environment (DCE) credentials between clients (100) and servers (102) interconnected in a LAN server environment (8) which does not support remote procedure calls (RPC) natively, comprising: predefining an extension of a server management block (SMB) protocol to exchange credentials; accessing with said server supporting said predefined extension  a generic security subsystem (GSS) (126) through a GSS API interface defined by said DCE; and obtaining and validating said credentials from said GSS (126) in response to said accessing.<br>
2.	The method as claimed in claim 1, wherein said accessing step further comprises retrieving tokens with said clients and said server encapsulating information necessary to perform said mutual authentication.<br>
3.	The method as claimed in claim 1 or 2, wherein said extension of said SMB protocol includes activating a second bit in an SMBsecmode field in a negotiate protocol (NP) response.<br>
4.	The method as claimed in claim 3, further comprising detecting with said server an SMBsecpkgX response; and exchanging, in response to said detecting, GSS tokens between said client and said server to effect said mutual authentication.<br><br>
5.	The method as claimed in claim 4, further comprising defining a GSS/DCE token package corresponding to said SMBsecpkgX response.<br>
6.	The method as claimed in claim 5, further comprising calling with said client a GSS_initiate__sec_context function to obtain a first token to send to said server; transferring a second token in response to said first token from said client to said GSS_initiate_sec_context function; and returning with said GSS_initiate_sec_context function whether or not said server is authenticated.<br>
7.	The method as claimed in claim 6, further comprising extracting said second token with said server in response to said detecting said SMBsecpkgX response; processing said extracted token with a GSS_accept_sec_context function; receiving with said server a GSS token to send to said client in response to a client authentication; transferring said GSS token to said client on said SMBsecpkgX response; extracting with said server said credentials of said user from said GSS token; and attaching said extracted credentials to session data structures for use when said client seeks access to resources of said network.<br>
8. The method as claimed in any previous claim, wherein said server comprises a redirector, and said redirector and said GSS operate at different segments, and wherein said method further comprises establishing a credential manager process as an intermediary between said redirector and said GSS.<br><br>
9.	Apparatus for mutually authenticating during session setup with distributed computing environment (DCE) credentials between clients (100) and servers (102) interconnected in a LAN server environment (8) which does not support remote procedure calls (RPC) natively, comprising: means for predefining an extension of a server management block (SMB) protocol to exchange credentials; means for accessing with said server supporting said predefined extension, a generic security subsystem (GSS) (126) through a GSS API interface defined by said DCE; and means for obtaining and validating said credentials from said GSS (126) in response to said accessing.<br>
10.	The apparatus as claimed in claim 9, wherein said means for accessing further comprises means for retrieving tokens with said clients and said servers encapsulating information necessary to perform said mutual authentication.<br>
11.	The apparatus as claimed in claim 9 or 10, wherein said means for extension of said SMB protocol comprises means for activating a second bit in an SMBsecmode field in a negotiate protocol (NP) response.<br>
12.	The apparatus as claimed in claim 11, further comprising means for detecting with said server an SMBsecpkgX response; and means for exchanging, in response to said detecting, GSS tokens between said client and said server to effect said mutual authentication.<br><br>
13.	The apparatus as claimed in claim 12, further comprising means for defining a GSS/DCE token package corresponding to said SMBsecpkgX response.<br>
14.	The apparatus as claimed in claim 13, further comprising means for calling with said client a GSS_initiate_sec_context function to obtain a first token to send to said server; means for transferring a second token in response to said first token from said client to said GSS_initiate_sec_context function; and means for returning with said GSS_initiate_sec_context function whether or not said server is authenticated.<br>
15.	The apparatus as claimed in claim 14, further comprising means for extracting said second token with said server in response to said detecting said SMBsecpkgX response; means for processing said extracted token with a GSS_accept_sec_context function; means for receiving with said server a GSS token to send to said client in response to a client authentication; means for transferring said GSS token to said client on said SMBsecpkgX response; means for extracting with said server said credentials of said user from said GSS token; and means for attaching said extracted credentials to session data structures for use when said client seeks access to resources of said network.<br>
16.	The apparatus as claimed in any one of the claims 9 to 15, wherein said server comprises a redirector, and said redirector and said GSS operate at<br><br>
different segments, and wherein said apparatus further comprises means for establishing a credential manager process as an intermediary between said redirector and said GSS.<br>
17.	A method for mutually authenticating substantially as herein described<br>
with reference to the accompanying drawings.<br>
18.	Apparatus for mutually authenticating substantially as herein described<br>
with reference to the accompanying drawings.</td>
			</tr>
		</table>	
		<br>
		<h3>Documents:</h3>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBhYnN0cmFjdCBkdXBsaWNhdGUucGRm" target="_blank" style="word-wrap:break-word;">2050-mas-1996 abstract duplicate.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBhYnN0cmFjdC5wZGY=" target="_blank" style="word-wrap:break-word;">2050-mas-1996 abstract.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBjbGFpbXMgZHVwbGljYXRlLnBkZg==" target="_blank" style="word-wrap:break-word;">2050-mas-1996 claims duplicate.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBjbGFpbXMucGRm" target="_blank" style="word-wrap:break-word;">2050-mas-1996 claims.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBjb3JyZXNwb25kZW5jZSBvdGhlcnMucGRm" target="_blank" style="word-wrap:break-word;">2050-mas-1996 correspondence others.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBjb3JyZXNwb25kZW5jZSBwby5wZGY=" target="_blank" style="word-wrap:break-word;">2050-mas-1996 correspondence po.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBkZXNjcmlwdGlvbiAoY29tcGxldGUpIGR1cGxpY2F0ZS5wZGY=" target="_blank" style="word-wrap:break-word;">2050-mas-1996 description (complete) duplicate.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBkZXNjcmlwdGlvbiAoY29tcGxldGUpLnBkZg==" target="_blank" style="word-wrap:break-word;">2050-mas-1996 description (complete).pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBkcmF3aW5ncy5wZGY=" target="_blank" style="word-wrap:break-word;">2050-mas-1996 drawings.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBmb3JtLTIucGRm" target="_blank" style="word-wrap:break-word;">2050-mas-1996 form-2.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBmb3JtLTI2LnBkZg==" target="_blank" style="word-wrap:break-word;">2050-mas-1996 form-26.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBmb3JtLTQucGRm" target="_blank" style="word-wrap:break-word;">2050-mas-1996 form-4.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBmb3JtLTYucGRm" target="_blank" style="word-wrap:break-word;">2050-mas-1996 form-6.pdf</a></p>
				<p><a href="http://ipindiaonline.gov.in/patentsearch/GrantedSearch/pdfviewer.aspx?AppNo=MjA1MC1tYXMtMTk5NiBwZXRpdGlvbi5wZGY=" target="_blank" style="word-wrap:break-word;">2050-mas-1996 petition.pdf</a></p>
		<br>
		<div class="pull-left">
			<a href="198357-a-protective-cover-made-from-a-conjugated-fibre-nonwoven-fabric-laminated-with-a-film.html">&laquo; Previous Patent</a>
		</div>
		<div class="pull-right">
			<a href="198359-a-venting-value-for-a-venting-bore-of-a-vulcanization-mould.html">Next Patent &raquo;</a>
		</div>			
	</div><!-- /span8 -->
	<div class="span4">
		<div class="well infobox">
			<table class="table table-condensed">
				<tr>
					<th>Patent Number</th>
					<td>198358</td>
				</tr>
				<tr>
					<th>Indian Patent Application Number</th>
					<td>2050/MAS/1996</td>
				</tr>
				<tr>
					<th>PG Journal Number</th>
					<td>30/2009</td>
				</tr>
				<tr>
					<th>Publication Date</th>
					<td>24-Jul-2009</td>
				</tr>
				<tr>
					<th>Grant Date</th>
					<td></td>
				</tr>
				<tr>
					<th>Date of Filing</th>
					<td>18-Nov-1996</td>
				</tr>
				<tr>
					<th>Name of Patentee</th>
					<td>INTERNATIONAL BUSINESS MACHINE CORPORATION</td>
				</tr>
				<tr>
					<th>Applicant Address</th>
					<td>ARMONK , NEW YORK, NY10504,</td>
				</tr>
				<tr>
					<td colspan=2>
								<h5>Inventors:</h5>
								<table class="table">
									<tr>
										<th>#</th>
										<th>Inventor's Name</th>
										<th>Inventor's Address</th>
									</tr>

										<tr>
											<td>1</td>
											<td>TIMOTHY ROGER KELIS,</td>
											<td>3919 GRAYLING LANE, ROUND ROCK, TEXAS 78681;</td>
										</tr>
										<tr>
											<td>2</td>
											<td>THOMAS FRANK PEEBLES</td>
											<td>2323 THORNWILD PASS, AUSTIN, TEXAS 78758;</td>
										</tr>
								</table>
					</td>
				</tr>
				<tr>
					<th>PCT International Classification Number</th>
					<td>187H</td>
				</tr>
				<tr>
					<th>PCT International Application Number</th>
					<td>N/A</td>
				</tr>
				<tr>
					<th>PCT International Filing date</th>
					<td></td>
				</tr>
				<tr>
					<td colspan=2>
						<h5>PCT Conventions:</h5>
						<table class="table">
							<tr>
								<th>#</th>
								<th>PCT Application Number</th>
								<th>Date of Convention</th>
								<th>Priority Country</th>
							</tr>

								<tr>
									<td>1</td>
									<td>08/570,463</td>
									<td>1995-12-11</td>
								    <td>U.S.A.</td>
								</tr>

						</table>
					</td>
				</tr>
			</table>
		</div><!-- /well -->
	</div><!-- /span4 -->
</div><!-- /row-fluid -->

        </div>

      </div><!--/row-->

      <footer class="footer">

        <style>
        .allindianpatents-footer { width: 320px; height: 50px; }
        @media(min-width: 500px) { .allindianpatents-footer { width: 468px; height: 60px; } }
        @media(min-width: 800px) { .allindianpatents-footer { width: 728px; height: 90px; } }
        </style>
        <center>
        </center>

        <p>&copy; All Indian Patents, 2013-2021.</p>
        <p>Patent data available in the public domain from Indian Patents Office, Department of Industrial Policy and Promotions, Ministry of Commerce and Industry, Government of India.</p>
      </footer>

    </div> <!-- /container -->

    <!-- Javascripts
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="../assets/application-95f297ff0d8d2015987f04b30593c800.js" type="text/javascript"></script>

    <!-- Start of StatCounter Code for Default Guide -->
    <script type="text/javascript">
    var sc_project=8902313; 
    var sc_invisible=1; 
    var sc_security="3c1f8147"; 
    var scJsHost = (("https:" == document.location.protocol) ?
    "https://secure." : "http://www.");
    document.write("<sc"+"ript type='text/javascript' src='" +
    scJsHost+
    "statcounter.com/counter/counter.js'></"+"script>");
    </script>
    <noscript><div class="statcounter"><a title="web stats"
    href="http://statcounter.com/free-web-stats/"
    target="_blank"><img class="statcounter"
    src="http://c.statcounter.com/8902313/0/3c1f8147/1/"
    alt="web stats"></a></div></noscript>
    <!-- End of StatCounter Code for Default Guide -->

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','http://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-244143-31', 'allindianpatents.com');
      ga('send', 'pageview');

    </script>

  </body>

<!-- Mirrored from www.allindianpatents.com/patents/198358-a-method-and-an-apparatus-for-mutually-authenticating-during-session-setup-with-distributed-computing-environment-credentials-between-clients-and-servers-interconected-in-a-lan-server-environment by HTTrack Website Copier/3.x [XR&CO'2014], Fri, 05 Apr 2024 06:35:09 GMT -->
</html>
